1.2021.03.17
django安装使用
    右键文件夹 open as pycharm project
    配置项目虚拟环境
    安装django
    pip install -i https://douban.com/simple/ django
    新建项目
    django-admin startproject project_name
    新建应用
    python manage.py startapp
    配置调试环境
    Run->Edit Configuration
    script path: path of manage.py
    parameters: runserver
项目基本设置
    setting.py
    LANGUAGE_CODE = 'zh-hans'
    TIME_ZONE = 'Asia/Shanghai'
使用模板
    manage.py同级新建templates文件夹
    setting.py
    TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates'), ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

2.2021.03.18
django_mysql数据库配置
    项目setting.py
    DATABASES = {
    'default': {
        # 数据库引擎配置
        'ENGINE': 'django.db.backends.mysql',
        # 数据库的名字
        'NAME': 'vote',
        # 数据库服务器的IP地址（本机可以写localhost或127.0.0.1）
        'HOST': 'localhost',
        # 启动MySQL服务的端口号
        'PORT': 3306,
        # 数据库用户名和口令
        'USER': 'hellokitty',
        'PASSWORD': 'Hellokitty.618',
        # 数据库使用的字符集
        'CHARSET': 'utf8',
        # 数据库时间日期的时区设定
        'TIME_ZONE': 'Asia/Chongqing',
        }
    }

    安装pymysql驱动
    pip install pymysql
    django项目__init__.py添加：
    import pymysql
    pymysql.install_as_MySQLdb()

    利用Django的ORM，我们可以直接将数据库中已创建的表映射到Django中的模型类
    python manage.py inspectdb > polls/models.py  （polls:应用名）


    终端中进行CRUD操作
    python manage.py shell

django管理后台模型
    1.数据库迁移
    python manage.py migrate

    2.创建django后台管理员
    python manage.py createsuperuser

    3.注册模型类
    from django.contrib import admin

    from polls.models import Subject, Teacher

    admin.site.register(Subject)
    admin.site.register(Teacher)

    4.注册模型管理类
    from django.contrib import admin

    from polls.models import Subject, Teacher


    class SubjectModelAdmin(admin.ModelAdmin):
        list_display = ('no', 'name', 'intro', 'is_hot')
        search_fields = ('name', )
        ordering = ('no', )

    admin.site.register(Subject,SubjectModelAdmin)


3.2021.03.19
加载静态资源
    manage.py同级新建static文件夹
    在项目配置文件setting.py中配置静态资源所在的文件夹和URL前缀
    STATICFILES_DIRS = [os.path.join(BASE_DIR,'static')]
    STATIC_URL = '/static/'

4.2021.03.22
    两个用户wangdachui和hellokitty密码分别是1qaz2wsx和Abc123!!


5.2021.03.23
session:
    写入：request.session['key']=value
    读取：后端  value = request.session['key']
         前端  {{ request.session.key }}
    清除：request.session.flush()

cookie:
    写入：response = HttpResponse | render | redirect
         response.set_cookie(key,value,...)
         response.set_signed_cookie(key,value,salt='加密盐',...)
         return response

    读取：request.COOKIES.get(key)
    删除：response = HttpResponse | render | redirect
         response.delete_cookie(key)
         return response

导出excel文件
    from openpyxl import Workbook
    from io import BytesIO
    from django.utils.http import urlquote

    wb = Workbook()

    output = BytesIO()
    wb.save(output)  # 将excel文件内容保存到IO中
    output.seek(0)  # 重新定位到开始

    response = HttpResponse(output.getvalue(), content_type='application/vnd.ms-excel')
    file_name = urlquote(file_name)  # 使用urlquote()方法解决中文无法使用问题
    response['Content-Disposition'] = f'attachment; filename={file_name}'
    return response

日志配置：
    setting.py 配置  可以参照官方文档再结合项目实际需求来进行
    LOGGING = {
        'version': 1,
        # 是否禁用已经存在的日志器
        'disable_existing_loggers': False,
        # 日志格式化器
        'formatters': {
            'simple': {
                'format': '%(asctime)s %(module)s.%(funcName)s: %(message)s',
                'datefmt': '%Y-%m-%d %H:%M:%S',
            },
            'verbose': {
                'format': '%(asctime)s %(levelname)s [%(process)d-%(threadName)s] '
                          '%(module)s.%(funcName)s line %(lineno)d: %(message)s',
                'datefmt': '%Y-%m-%d %H:%M:%S',
            }
        },
        # 日志过滤器
        'filters': {
            # 只有在Django配置文件中DEBUG值为True时才起作用
            'require_debug_true': {
                '()': 'django.utils.log.RequireDebugTrue',
            },
        },
        # 日志处理器
        'handlers': {
            # 输出到控制台
            'console': {
                'class': 'logging.StreamHandler',
                'level': 'DEBUG',
                'filters': ['require_debug_true'],
                'formatter': 'simple',
            },
            # 输出到文件(每周切割一次)
            'file1': {
                'class': 'logging.handlers.TimedRotatingFileHandler',
                'filename': 'access.log',
                'when': 'W0',
                'backupCount': 12,
                'formatter': 'simple',
                'level': 'INFO',
            },
            # 输出到文件(每天切割一次)
            'file2': {
                'class': 'logging.handlers.TimedRotatingFileHandler',
                'filename': 'error.log',
                'when': 'D',
                'backupCount': 31,
                'formatter': 'verbose',
                'level': 'WARNING',
            },
        },
        # 日志器记录器
        'loggers': {
            'django': {
                # 需要使用的日志处理器
                'handlers': ['console', 'file1', 'file2'],
                # 是否向上传播日志信息
                'propagate': True,
                # 日志级别(不一定是最终的日志级别)
                'level': 'DEBUG',
            },
        }
    }

调试工具：Django-Debug-Toolbar
    1.安装：
    pip install django-debug-toolbar

    2.配置：
    修改setting.py
    INSTALLED_APPS = [
        'debug_toolbar',
    ]

    MIDDLEWARE = [
        'debug_toolbar.middleware.DebugToolbarMiddleware',
    ]

    DEBUG_TOOLBAR_CONFIG = {
        # 引入jQuery库
        'JQUERY_URL': 'https://cdn.bootcss.com/jquery/3.3.1/jquery.min.js',
        # 工具栏是否折叠
        'SHOW_COLLAPSED': True,
        # 是否显示工具栏
        'SHOW_TOOLBAR_CALLBACK': lambda x: True,
    }

    修改url.py
    from project_name import settings
    if settings.DEBUG:
        import debug_toolbar
         urlpatterns.insert(0, path('__debug__/', include(debug_toolbar.urls)))

    4.调试项目，页面右侧出现调试信息

中间件
    自定义中间件，写法等同于装饰器函数
    1.定义中间件函数
    def XXX_middleware(get_resp):
        def wrapper(request, *args, **kwargs):
            pass
            return get_resp(request, *args, **kwargs)
        return wrapper
    2.修改配置文件来激活中间件使其生效
    settings.py
    MIDDLEWARE = [
        ...,
        XXX_middleware,
    ]

2021.03.25
django restframework
    1.安装
    pip install djangorestframework

    2.配置DRF   setting.py
    INSTALLED_APPS = [
    ...
    'rest_framework',
    ...
    ]

    # 下面的配置根据项目需要进行设置
    REST_FRAMEWORK = {
        # 配置默认页面大小
        # 'PAGE_SIZE': 10,
        # 配置默认的分页类
        # 'DEFAULT_PAGINATION_CLASS': '...',
        # 配置异常处理器
        # 'EXCEPTION_HANDLER': '...',
        # 配置默认解析器
        # 'DEFAULT_PARSER_CLASSES': (
        #     'rest_framework.parsers.JSONParser',
        #     'rest_framework.parsers.FormParser',
        #     'rest_framework.parsers.MultiPartParser',
        # ),
        # 配置默认限流类
        # 'DEFAULT_THROTTLE_CLASSES': (
        #     '...'
        # ),
        # 配置默认授权类
        # 'DEFAULT_PERMISSION_CLASSES': (
            'rest_framework.permissions.IsAuthenticated',

        # ),
        # 配置默认认证类
        # 'DEFAULT_AUTHENTICATION_CLASSES': (
            'rest_framework.authentication.BasicAuthentication',
            'rest_framework.authentication.SessionAuthentication',
            'rest_framework.authentication.TokenAuthentication',
        # ),
    }

   3.序列化器serializers.py
   from rest_framework import serializers
   from .models import XXXModel,XXXModel

   class XXXSerializer(serializers.ModelSerializer):
       class Meta:
        model = XXXModel
        fields = "__all__"

   4.视图view.py
   from .models import StudModel,ClassesModel
   from .serializer import XXXSerializer

   from rest_framework.viewsets import ModelViewSet

   class XXXModelViewSet(ModelViewSet):
       queryset = XXX.objects.all()    # 必须
       serializer_class = XXXSerializer  # 必须
       pagination_class = XXXPagination
       permission_classes = (IsAuthenticated,)
       authentication_classes = (JSONWebTokenAuthentication,)


   ModelViewSet：
   from rest_framework.authentication import TokenAuthentication, BasicAuthentication, SessionAuthentication
   from rest_framework.permissions import IsAuthenticated, IsAdminUser, IsAuthenticatedOrReadOnly, AllowAny


   class UserViewSet(ModelViewSet):

    fields = (
        swagger_doc(name="Authorization", description='用户token', location='header', required=False),
    )

    # 认证
    # authentication_classes = [Authentication, ]
    # queryset 和 serializer_class  必须指定
    queryset = User.objects.all()
    serializer_class = CreateUserSerializer
    pagination_class = StandardResultsSetPagination

    def retrieve(self, request, pk=None):
        """ 用户详情 """
        # 获取实例
        user = self.get_object()
        # 序列化
        serializer = self.get_serializer(user)
        return success_response(serializer.data)

    def create(self, request, *args, **kwargs):
        """ 创建用户 """

        serializer = self.get_serializer(data=request.data)
        # save 前必须先调用 is_valid()
        serializer.is_valid(raise_exception=True)
        serializer.save()

        return success_response(serializer.data)

    def update(self, request: Request, *args, **kwargs):
        """ 更新用户信息 """

    def destroy(self, request: Request, *args, **kwargs):
        """ 删除用户 """

        return success_response()

    def list(self, request: Request, *args, **kwargs):
        """ 获取用户列表 """

        return success_response()

   5.配置app urls.py
   from django.urls.conf import include, path
   from rest_framework.routers import SimpleRouter

   from polls.views import XXXModelViewSet

   router = SimpleRouter()
   router.register('xxx', XXXModelViewSet)

   urlpatterns = [
       path('', include(router.urls)),
   ]

   6.配置项目urls.py
   from django.contrib import admin
   from django.urls import path,include

   urlpatterns = [
       path('admin/', admin.site.urls),
       path('api/', include('app.urls')),
   ]


2021.04.01
Django项目接入Redis
    1.安装
    pip install django-redis
    2.配置setting.py
    CACHES = {
        'default': {
            # 指定通过django-redis接入Redis服务
            'BACKEND': 'django_redis.cache.RedisCache',
            # Redis服务器的URL
            'LOCATION': ['redis://127.0.0.1:6379/0', ],
            # Redis中键的前缀（解决命名冲突）
            'KEY_PREFIX': 'vote',
            # 其他的配置选项
            'OPTIONS': {
                'CLIENT_CLASS': 'django_redis.client.DefaultClient',
                # 连接池（预置若干备用的Redis连接）参数
                'CONNECTION_POOL_KWARGS': {
                    # 最大连接数
                    'max_connections': 512,
                },
                # 连接Redis的用户口令
                'PASSWORD': 'foobared',
            }
        },
    }